##Function creates a special matrix object that can cache its inverse. This is essentially done by setting the value of the matrix, getting the value of the matrix, setting the inverse of the matrix, getting the inverse of the matrix.

makeCacheMatrix <- function(x = numeric()) {
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinverse <- function(mean) m <<- inverse
  getinverse <- function() m
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}


##Function computes the inverse of the return of the function above. But first it checks if the inverse has already been calculated if so it gets the inverse from the cahce and skips the calculation.

cacheSolve <- function(x, ...) {
  m <- x$getinverse()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  data <- x$get()
  m <- mean(data, ...)
  x$setinverse(m)
  m
}
